// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// inv_bijectionvector
arma::vec inv_bijectionvector(unsigned int K, double CL);
RcppExport SEXP _AHMQ_inv_bijectionvector(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_bijectionvector(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// twoToten
double twoToten(arma::ivec x);
RcppExport SEXP _AHMQ_twoToten(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(twoToten(x));
    return rcpp_result_gen;
END_RCPP
}
// ff
arma::mat ff(arma::mat a);
RcppExport SEXP _AHMQ_ff(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(ff(a));
    return rcpp_result_gen;
END_RCPP
}
// pYi
double pYi(const arma::vec& ETA_i, const arma::vec& Y_i, const arma::vec& ss, const arma::vec& gs);
RcppExport SEXP _AHMQ_pYi(SEXP ETA_iSEXP, SEXP Y_iSEXP, SEXP ssSEXP, SEXP gsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ETA_i(ETA_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_i(Y_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gs(gsSEXP);
    rcpp_result_gen = Rcpp::wrap(pYi(ETA_i, Y_i, ss, gs));
    return rcpp_result_gen;
END_RCPP
}
// Boolean
arma::mat Boolean(arma::mat A);
RcppExport SEXP _AHMQ_Boolean(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Boolean(A));
    return rcpp_result_gen;
END_RCPP
}
// Booleanvec
arma::vec Booleanvec(arma::vec A);
RcppExport SEXP _AHMQ_Booleanvec(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(Booleanvec(A));
    return rcpp_result_gen;
END_RCPP
}
// Reachability
arma::mat Reachability(const arma::mat& StrucMat, unsigned int K);
RcppExport SEXP _AHMQ_Reachability(SEXP StrucMatSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type StrucMat(StrucMatSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Reachability(StrucMat, K));
    return rcpp_result_gen;
END_RCPP
}
// ConnectMat
arma::mat ConnectMat(const arma::mat& R, unsigned int K);
RcppExport SEXP _AHMQ_ConnectMat(SEXP RSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(ConnectMat(R, K));
    return rcpp_result_gen;
END_RCPP
}
// Transitive
arma::mat Transitive(const arma::mat& G, unsigned int K);
RcppExport SEXP _AHMQ_Transitive(SEXP GSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Transitive(G, K));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _AHMQ_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// AHM_sg
Rcpp::List AHM_sg(const arma::mat& Y, const arma::mat& Q, const arma::mat& ALPHAS, const arma::vec& ss_old, double as0, double bs0, double ag0, double bg0);
RcppExport SEXP _AHMQ_AHM_sg(SEXP YSEXP, SEXP QSEXP, SEXP ALPHASSEXP, SEXP ss_oldSEXP, SEXP as0SEXP, SEXP bs0SEXP, SEXP ag0SEXP, SEXP bg0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ALPHAS(ALPHASSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ss_old(ss_oldSEXP);
    Rcpp::traits::input_parameter< double >::type as0(as0SEXP);
    Rcpp::traits::input_parameter< double >::type bs0(bs0SEXP);
    Rcpp::traits::input_parameter< double >::type ag0(ag0SEXP);
    Rcpp::traits::input_parameter< double >::type bg0(bg0SEXP);
    rcpp_result_gen = Rcpp::wrap(AHM_sg(Y, Q, ALPHAS, ss_old, as0, bs0, ag0, bg0));
    return rcpp_result_gen;
END_RCPP
}
// maipow
arma::mat maipow(arma::mat a, arma::mat b);
RcppExport SEXP _AHMQ_maipow(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(maipow(a, b));
    return rcpp_result_gen;
END_RCPP
}
// vecpow_1_to_vec
arma::vec vecpow_1_to_vec(double a, arma::vec b);
RcppExport SEXP _AHMQ_vecpow_1_to_vec(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(vecpow_1_to_vec(a, b));
    return rcpp_result_gen;
END_RCPP
}
// vecpow
arma::vec vecpow(arma::vec a, arma::vec b);
RcppExport SEXP _AHMQ_vecpow(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(vecpow(a, b));
    return rcpp_result_gen;
END_RCPP
}
// add_path_sample1
Rcpp::List add_path_sample1(arma::mat R, arma::mat G, int K);
RcppExport SEXP _AHMQ_add_path_sample1(SEXP RSEXP, SEXP GSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(add_path_sample1(R, G, K));
    return rcpp_result_gen;
END_RCPP
}
// reduce_path_sample1
Rcpp::List reduce_path_sample1(arma::mat G, int K);
RcppExport SEXP _AHMQ_reduce_path_sample1(SEXP GSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_path_sample1(G, K));
    return rcpp_result_gen;
END_RCPP
}
// Trans_10to2
arma::vec Trans_10to2(unsigned int K, double CL);
RcppExport SEXP _AHMQ_Trans_10to2(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(Trans_10to2(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// Trans_10to2_mat
arma::mat Trans_10to2_mat(unsigned int K, const arma::vec& CL);
RcppExport SEXP _AHMQ_Trans_10to2_mat(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(Trans_10to2_mat(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// Accept_ratio_piprior
double Accept_ratio_piprior(arma::mat y, arma::vec s, arma::vec g, arma::vec pi0, arma::vec delta0, arma::mat alpha, arma::mat alpha_new, arma::mat Q, arma::mat Q_new, arma::mat G, arma::mat G_new, arma::vec alpha_possible_index, arma::vec alpha_new_possible_index, arma::vec alpha_possible_code, arma::vec alpha_new_possible_code, arma::mat alpha_possible, arma::mat alpha_new_possible, double pr_G, int action, double p1, double p2);
RcppExport SEXP _AHMQ_Accept_ratio_piprior(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP pi0SEXP, SEXP delta0SEXP, SEXP alphaSEXP, SEXP alpha_newSEXP, SEXP QSEXP, SEXP Q_newSEXP, SEXP GSEXP, SEXP G_newSEXP, SEXP alpha_possible_indexSEXP, SEXP alpha_new_possible_indexSEXP, SEXP alpha_possible_codeSEXP, SEXP alpha_new_possible_codeSEXP, SEXP alpha_possibleSEXP, SEXP alpha_new_possibleSEXP, SEXP pr_GSEXP, SEXP actionSEXP, SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_new(alpha_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_new(Q_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_new(G_newSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_possible_index(alpha_possible_indexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_new_possible_index(alpha_new_possible_indexSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_possible_code(alpha_possible_codeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_new_possible_code(alpha_new_possible_codeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_possible(alpha_possibleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_new_possible(alpha_new_possibleSEXP);
    Rcpp::traits::input_parameter< double >::type pr_G(pr_GSEXP);
    Rcpp::traits::input_parameter< int >::type action(actionSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(Accept_ratio_piprior(y, s, g, pi0, delta0, alpha, alpha_new, Q, Q_new, G, G_new, alpha_possible_index, alpha_new_possible_index, alpha_possible_code, alpha_new_possible_code, alpha_possible, alpha_new_possible, pr_G, action, p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// Trans_2to10
double Trans_2to10(arma::vec x, int K);
RcppExport SEXP _AHMQ_Trans_2to10(SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Trans_2to10(x, K));
    return rcpp_result_gen;
END_RCPP
}
// Trans_2to10_mat
arma::vec Trans_2to10_mat(arma::mat x, int K);
RcppExport SEXP _AHMQ_Trans_2to10_mat(SEXP xSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Trans_2to10_mat(x, K));
    return rcpp_result_gen;
END_RCPP
}
// Reduced_alpha1
Rcpp::List Reduced_alpha1(arma::mat alpha_all, arma::mat R, int K);
RcppExport SEXP _AHMQ_Reduced_alpha1(SEXP alpha_allSEXP, SEXP RSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Reduced_alpha1(alpha_all, R, K));
    return rcpp_result_gen;
END_RCPP
}
// AHM_alpha
arma::mat AHM_alpha(arma::mat y, arma::vec s, arma:: vec g, arma::mat Q, arma::mat G, arma::mat alpha_all, arma::vec pi0, int N, int J, int K, int L);
RcppExport SEXP _AHMQ_AHM_alpha(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP QSEXP, SEXP GSEXP, SEXP alpha_allSEXP, SEXP pi0SEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(AHM_alpha(y, s, g, Q, G, alpha_all, pi0, N, J, K, L));
    return rcpp_result_gen;
END_RCPP
}
// rDirichlet
arma::vec rDirichlet(const arma::vec& deltas);
RcppExport SEXP _AHMQ_rDirichlet(SEXP deltasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type deltas(deltasSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet(deltas));
    return rcpp_result_gen;
END_RCPP
}
// AHM_alpha_pi
Rcpp::List AHM_alpha_pi(arma::mat y, arma:: vec s, arma:: vec g, arma::mat Q, arma::mat G, arma::mat alpha_all, arma::vec pi0, arma::vec delta0, int N, int J, int K, int L);
RcppExport SEXP _AHMQ_AHM_alpha_pi(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP QSEXP, SEXP GSEXP, SEXP alpha_allSEXP, SEXP pi0SEXP, SEXP delta0SEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma:: vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(AHM_alpha_pi(y, s, g, Q, G, alpha_all, pi0, delta0, N, J, K, L));
    return rcpp_result_gen;
END_RCPP
}
// AHM_Q
arma::mat AHM_Q(arma::mat y, arma::vec s, arma::vec g, arma::mat alpha, arma::mat Q_all, arma::mat Q, int N, int J, int K, arma::vec alpha_current_possible_index, arma::mat eta, arma::vec alpha_code);
RcppExport SEXP _AHMQ_AHM_Q(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP Q_allSEXP, SEXP QSEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP alpha_current_possible_indexSEXP, SEXP etaSEXP, SEXP alpha_codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_all(Q_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_current_possible_index(alpha_current_possible_indexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha_code(alpha_codeSEXP);
    rcpp_result_gen = Rcpp::wrap(AHM_Q(y, s, g, alpha, Q_all, Q, N, J, K, alpha_current_possible_index, eta, alpha_code));
    return rcpp_result_gen;
END_RCPP
}
// update_G
arma::mat update_G(arma::mat y, arma::vec s, arma::vec g, arma::mat alpha, arma::mat alpha_all, arma::mat Q, arma::mat G, arma::mat R, int N, int J, int K, int L, double p1, double p2, arma::vec pi, arma::vec delta0, arma::mat G_new, double prob_edge, int action);
RcppExport SEXP _AHMQ_update_G(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP alpha_allSEXP, SEXP QSEXP, SEXP GSEXP, SEXP RSEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP LSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP piSEXP, SEXP delta0SEXP, SEXP G_newSEXP, SEXP prob_edgeSEXP, SEXP actionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_new(G_newSEXP);
    Rcpp::traits::input_parameter< double >::type prob_edge(prob_edgeSEXP);
    Rcpp::traits::input_parameter< int >::type action(actionSEXP);
    rcpp_result_gen = Rcpp::wrap(update_G(y, s, g, alpha, alpha_all, Q, G, R, N, J, K, L, p1, p2, pi, delta0, G_new, prob_edge, action));
    return rcpp_result_gen;
END_RCPP
}
// AHM_G
arma::mat AHM_G(arma::mat y, arma::vec s, arma::vec g, arma::mat alpha, arma::mat alpha_all, arma::mat Q, arma::mat G, arma::mat R, int N, int J, int K, int L, double p1, double p2, arma::vec pi0, arma::vec delta0);
RcppExport SEXP _AHMQ_AHM_G(SEXP ySEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP alpha_allSEXP, SEXP QSEXP, SEXP GSEXP, SEXP RSEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP LSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP pi0SEXP, SEXP delta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta0(delta0SEXP);
    rcpp_result_gen = Rcpp::wrap(AHM_G(y, s, g, alpha, alpha_all, Q, G, R, N, J, K, L, p1, p2, pi0, delta0));
    return rcpp_result_gen;
END_RCPP
}
// generate_sequence
arma::vec generate_sequence(int N);
RcppExport SEXP _AHMQ_generate_sequence(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_sequence(N));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
Rcpp::IntegerVector sample_int(int N, int N1);
RcppExport SEXP _AHMQ_sample_int(SEXP NSEXP, SEXP N1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(N, N1));
    return rcpp_result_gen;
END_RCPP
}
// random_Q
arma::mat random_Q(unsigned int J, unsigned int K);
RcppExport SEXP _AHMQ_random_Q(SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(random_Q(J, K));
    return rcpp_result_gen;
END_RCPP
}
// AHM_update
void AHM_update(arma::mat Y, arma::mat& alpha, arma:: vec& s, arma:: vec& g, arma::mat& Q, arma::mat& G, arma::vec& pi, double p1, double p2, arma::mat alpha_all, arma::mat Q_all, int N, int J, int K, int L, int N1, double a_s0, double a_g0, double b_s0, double b_g0, arma::vec delta0, arma::mat eta);
RcppExport SEXP _AHMQ_AHM_update(SEXP YSEXP, SEXP alphaSEXP, SEXP sSEXP, SEXP gSEXP, SEXP QSEXP, SEXP GSEXP, SEXP piSEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP alpha_allSEXP, SEXP Q_allSEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP LSEXP, SEXP N1SEXP, SEXP a_s0SEXP, SEXP a_g0SEXP, SEXP b_s0SEXP, SEXP b_g0SEXP, SEXP delta0SEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma:: vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma:: vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_all(alpha_allSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q_all(Q_allSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< double >::type a_s0(a_s0SEXP);
    Rcpp::traits::input_parameter< double >::type a_g0(a_g0SEXP);
    Rcpp::traits::input_parameter< double >::type b_s0(b_s0SEXP);
    Rcpp::traits::input_parameter< double >::type b_g0(b_g0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta0(delta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    AHM_update(Y, alpha, s, g, Q, G, pi, p1, p2, alpha_all, Q_all, N, J, K, L, N1, a_s0, a_g0, b_s0, b_g0, delta0, eta);
    return R_NilValue;
END_RCPP
}
// AHMQ_MCMC
Rcpp::List AHMQ_MCMC(arma::mat Y, int K, arma::vec& s, arma::vec& g, arma::vec& pi, arma::mat& G, arma::mat& Q, arma::mat& alpha, int N1, int chain_length, int burn_in, double a_s0, double a_g0, double b_s0, double b_g0, double p1, double p2);
RcppExport SEXP _AHMQ_AHMQ_MCMC(SEXP YSEXP, SEXP KSEXP, SEXP sSEXP, SEXP gSEXP, SEXP piSEXP, SEXP GSEXP, SEXP QSEXP, SEXP alphaSEXP, SEXP N1SEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP, SEXP a_s0SEXP, SEXP a_g0SEXP, SEXP b_s0SEXP, SEXP b_g0SEXP, SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type a_s0(a_s0SEXP);
    Rcpp::traits::input_parameter< double >::type a_g0(a_g0SEXP);
    Rcpp::traits::input_parameter< double >::type b_s0(b_s0SEXP);
    Rcpp::traits::input_parameter< double >::type b_g0(b_g0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(AHMQ_MCMC(Y, K, s, g, pi, G, Q, alpha, N1, chain_length, burn_in, a_s0, a_g0, b_s0, b_g0, p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// dina_logL
double dina_logL(const arma::mat y, unsigned int N, unsigned int J, unsigned int K, const arma::vec s, const arma::vec g, const arma::mat alpha, const arma::mat Q);
RcppExport SEXP _AHMQ_dina_logL(SEXP ySEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(dina_logL(y, N, J, K, s, g, alpha, Q));
    return rcpp_result_gen;
END_RCPP
}
// dina_logL_vec
arma::vec dina_logL_vec(const arma::mat y, unsigned int N, unsigned int J, unsigned int K, int chain, const arma::mat s, const arma::mat g, const arma::cube alpha, const arma::cube Q);
RcppExport SEXP _AHMQ_dina_logL_vec(SEXP ySEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP chainSEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(dina_logL_vec(y, N, J, K, chain, s, g, alpha, Q));
    return rcpp_result_gen;
END_RCPP
}
// bar_Dev_theta
double bar_Dev_theta(const arma::mat y, unsigned int N, unsigned int J, unsigned int K, int chain, const arma::mat s, const arma::mat g, const arma::cube alpha, const arma::cube Q);
RcppExport SEXP _AHMQ_bar_Dev_theta(SEXP ySEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP chainSEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(bar_Dev_theta(y, N, J, K, chain, s, g, alpha, Q));
    return rcpp_result_gen;
END_RCPP
}
// compute_DIC
double compute_DIC(const arma::mat y, unsigned int N, unsigned int J, unsigned int K, int chain, const arma::mat s, const arma::mat g, const arma::cube alpha, const arma::cube Q);
RcppExport SEXP _AHMQ_compute_DIC(SEXP ySEXP, SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP chainSEXP, SEXP sSEXP, SEXP gSEXP, SEXP alphaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_DIC(y, N, J, K, chain, s, g, alpha, Q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AHMQ_inv_bijectionvector", (DL_FUNC) &_AHMQ_inv_bijectionvector, 2},
    {"_AHMQ_twoToten", (DL_FUNC) &_AHMQ_twoToten, 1},
    {"_AHMQ_ff", (DL_FUNC) &_AHMQ_ff, 1},
    {"_AHMQ_pYi", (DL_FUNC) &_AHMQ_pYi, 4},
    {"_AHMQ_Boolean", (DL_FUNC) &_AHMQ_Boolean, 1},
    {"_AHMQ_Booleanvec", (DL_FUNC) &_AHMQ_Booleanvec, 1},
    {"_AHMQ_Reachability", (DL_FUNC) &_AHMQ_Reachability, 2},
    {"_AHMQ_ConnectMat", (DL_FUNC) &_AHMQ_ConnectMat, 2},
    {"_AHMQ_Transitive", (DL_FUNC) &_AHMQ_Transitive, 2},
    {"_AHMQ_mvrnormArma", (DL_FUNC) &_AHMQ_mvrnormArma, 3},
    {"_AHMQ_AHM_sg", (DL_FUNC) &_AHMQ_AHM_sg, 8},
    {"_AHMQ_maipow", (DL_FUNC) &_AHMQ_maipow, 2},
    {"_AHMQ_vecpow_1_to_vec", (DL_FUNC) &_AHMQ_vecpow_1_to_vec, 2},
    {"_AHMQ_vecpow", (DL_FUNC) &_AHMQ_vecpow, 2},
    {"_AHMQ_add_path_sample1", (DL_FUNC) &_AHMQ_add_path_sample1, 3},
    {"_AHMQ_reduce_path_sample1", (DL_FUNC) &_AHMQ_reduce_path_sample1, 2},
    {"_AHMQ_Trans_10to2", (DL_FUNC) &_AHMQ_Trans_10to2, 2},
    {"_AHMQ_Trans_10to2_mat", (DL_FUNC) &_AHMQ_Trans_10to2_mat, 2},
    {"_AHMQ_Accept_ratio_piprior", (DL_FUNC) &_AHMQ_Accept_ratio_piprior, 21},
    {"_AHMQ_Trans_2to10", (DL_FUNC) &_AHMQ_Trans_2to10, 2},
    {"_AHMQ_Trans_2to10_mat", (DL_FUNC) &_AHMQ_Trans_2to10_mat, 2},
    {"_AHMQ_Reduced_alpha1", (DL_FUNC) &_AHMQ_Reduced_alpha1, 3},
    {"_AHMQ_AHM_alpha", (DL_FUNC) &_AHMQ_AHM_alpha, 11},
    {"_AHMQ_rDirichlet", (DL_FUNC) &_AHMQ_rDirichlet, 1},
    {"_AHMQ_AHM_alpha_pi", (DL_FUNC) &_AHMQ_AHM_alpha_pi, 12},
    {"_AHMQ_AHM_Q", (DL_FUNC) &_AHMQ_AHM_Q, 12},
    {"_AHMQ_update_G", (DL_FUNC) &_AHMQ_update_G, 19},
    {"_AHMQ_AHM_G", (DL_FUNC) &_AHMQ_AHM_G, 16},
    {"_AHMQ_generate_sequence", (DL_FUNC) &_AHMQ_generate_sequence, 1},
    {"_AHMQ_sample_int", (DL_FUNC) &_AHMQ_sample_int, 2},
    {"_AHMQ_random_Q", (DL_FUNC) &_AHMQ_random_Q, 2},
    {"_AHMQ_AHM_update", (DL_FUNC) &_AHMQ_AHM_update, 22},
    {"_AHMQ_AHMQ_MCMC", (DL_FUNC) &_AHMQ_AHMQ_MCMC, 17},
    {"_AHMQ_dina_logL", (DL_FUNC) &_AHMQ_dina_logL, 8},
    {"_AHMQ_dina_logL_vec", (DL_FUNC) &_AHMQ_dina_logL_vec, 9},
    {"_AHMQ_bar_Dev_theta", (DL_FUNC) &_AHMQ_bar_Dev_theta, 9},
    {"_AHMQ_compute_DIC", (DL_FUNC) &_AHMQ_compute_DIC, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_AHMQ(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
